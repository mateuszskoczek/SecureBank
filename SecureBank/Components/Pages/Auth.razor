@page "/auth"

<h3>Login</h3>

@if (!_clientCodeAccepted)
{
    <p>Enter your client code:</p>

    <form>
        <InputText @bind-Value="_clientCodeArr[0]" class="single-input" data-index="1" maxlength="1" required></InputText>
        <InputText @bind-Value="_clientCodeArr[1]" class="single-input" data-index="2" maxlength="1" required></InputText>
        <InputText @bind-Value="_clientCodeArr[2]" class="single-input" data-index="3" maxlength="1" required></InputText>
        <InputText @bind-Value="_clientCodeArr[3]" class="single-input" data-index="4" maxlength="1" required></InputText>
        <InputText @bind-Value="_clientCodeArr[4]" class="single-input" data-index="5" maxlength="1" required></InputText>
        <InputText @bind-Value="_clientCodeArr[5]" class="single-input" data-index="6" maxlength="1" required></InputText>
        <InputText @bind-Value="_clientCodeArr[6]" class="single-input" data-index="7" maxlength="1" required></InputText>
        <InputText @bind-Value="_clientCodeArr[7]" class="single-input" data-index="8" maxlength="1" required></InputText>
    </form>
    <br />
    <button type="submit" class="btn btn-primary" @onclick="SubmitClientCode">Next</button>
    <br/>
    <br/>
    @if (!string.IsNullOrWhiteSpace(_clientCodeMessage))
    {
        <p class="text-red">Error: @_clientCodeMessage</p>
    }
}
else
{
    <p>Enter your password:</p>

    <form>
        <InputText type="password" @bind-Value="_clientPasswordArr[0]" class="single-input" data-index="1" maxlength="1" disabled="@(!_loginRequest?.Indexes.Contains(0))"></InputText>
        <InputText type="password" @bind-Value="_clientPasswordArr[1]" class="single-input" data-index="2" maxlength="1" disabled="@(!_loginRequest?.Indexes.Contains(1))"></InputText>
        <InputText type="password" @bind-Value="_clientPasswordArr[2]" class="single-input" data-index="3" maxlength="1" disabled="@(!_loginRequest?.Indexes.Contains(2))"></InputText>
        <InputText type="password" @bind-Value="_clientPasswordArr[3]" class="single-input" data-index="4" maxlength="1" disabled="@(!_loginRequest?.Indexes.Contains(3))"></InputText>
        <InputText type="password" @bind-Value="_clientPasswordArr[4]" class="single-input" data-index="5" maxlength="1" disabled="@(!_loginRequest?.Indexes.Contains(4))"></InputText>
        <InputText type="password" @bind-Value="_clientPasswordArr[5]" class="single-input" data-index="6" maxlength="1" disabled="@(!_loginRequest?.Indexes.Contains(5))"></InputText>
        <InputText type="password" @bind-Value="_clientPasswordArr[6]" class="single-input" data-index="7" maxlength="1" disabled="@(!_loginRequest?.Indexes.Contains(6))"></InputText>
        <InputText type="password" @bind-Value="_clientPasswordArr[7]" class="single-input" data-index="8" maxlength="1" disabled="@(!_loginRequest?.Indexes.Contains(7))"></InputText>
        <InputText type="password" @bind-Value="_clientPasswordArr[8]" class="single-input" data-index="9" maxlength="1" disabled="@(!_loginRequest?.Indexes.Contains(8))"></InputText>
        <InputText type="password" @bind-Value="_clientPasswordArr[9]" class="single-input" data-index="10" maxlength="1" disabled="@(!_loginRequest?.Indexes.Contains(9))"></InputText>
        <InputText type="password" @bind-Value="_clientPasswordArr[10]" class="single-input" data-index="11" maxlength="1" disabled="@(!_loginRequest?.Indexes.Contains(10))"></InputText>
        <InputText type="password" @bind-Value="_clientPasswordArr[11]" class="single-input" data-index="12" maxlength="1" disabled="@(!_loginRequest?.Indexes.Contains(11))"></InputText>
        <InputText type="password" @bind-Value="_clientPasswordArr[12]" class="single-input" data-index="13" maxlength="1" disabled="@(!_loginRequest?.Indexes.Contains(12))"></InputText>
        <InputText type="password" @bind-Value="_clientPasswordArr[13]" class="single-input" data-index="14" maxlength="1" disabled="@(!_loginRequest?.Indexes.Contains(13))"></InputText>
        <InputText type="password" @bind-Value="_clientPasswordArr[14]" class="single-input" data-index="15" maxlength="1" disabled="@(!_loginRequest?.Indexes.Contains(14))"></InputText>
        <InputText type="password" @bind-Value="_clientPasswordArr[15]" class="single-input" data-index="16" maxlength="1" disabled="@(!_loginRequest?.Indexes.Contains(15))"></InputText>
        <InputText type="password" @bind-Value="_clientPasswordArr[16]" class="single-input" data-index="17" maxlength="1" disabled="@(!_loginRequest?.Indexes.Contains(16))"></InputText>
        <InputText type="password" @bind-Value="_clientPasswordArr[17]" class="single-input" data-index="18" maxlength="1" disabled="@(!_loginRequest?.Indexes.Contains(17))"></InputText>
        <InputText type="password" @bind-Value="_clientPasswordArr[18]" class="single-input" data-index="19" maxlength="1" disabled="@(!_loginRequest?.Indexes.Contains(18))"></InputText>
        <InputText type="password" @bind-Value="_clientPasswordArr[19]" class="single-input" data-index="20" maxlength="1" disabled="@(!_loginRequest?.Indexes.Contains(19))"></InputText>
    </form>
    <br />
    <button class="btn" @onclick="OnInitialized">Back</button>
    <button type="submit" class="btn btn-primary" @onclick="SubmitClientPassword">Submit</button>
    @if (!string.IsNullOrWhiteSpace(_clientPasswordMessage))
    {
        <p class="text-red">Error: @_clientPasswordMessage</p>
    }
}




@code {
    #region SERVICES

    [Inject]
    protected IAccountsService _accountService { get; set; }

    #endregion



    #region FIELDS

    protected bool _clientCodeAccepted;

    protected string? _clientCodeMessage;

    protected string[] _clientCodeArr;
    protected string _clientCode => string.Join(string.Empty, _clientCodeArr);

    protected string[] _clientPasswordArr;
    protected string _clientPassword => string.Join(string.Empty, _clientPasswordArr);
    protected byte _clientPasswordFailCount;

    protected string? _clientPasswordMessage;

    protected GetPasswordVariantResponse? _loginRequest;

    #endregion



    #region METHODS

    protected override void OnInitialized()
    {
        _clientCodeAccepted = false;
        _clientCodeMessage = null;
        _clientCodeArr = new string[8];
        _clientPasswordArr = new string[20];
        _clientPasswordMessage = null;
        _loginRequest = null;
    }

    protected async void SubmitClientCode()
    {
        if (_clientCode.Length == 8 && int.TryParse(_clientCode, out int accountId))
        {
            APIResponse<GetPasswordVariantResponse> loginRequest = await _accountService.GetPasswordVariant(accountId);

            if (loginRequest.Success)
            {
                if (loginRequest.Data.ValidTo < DateTime.Now)
                {
                    _clientCodeMessage = "Your login request has already expired. Check your internet connection";
                }
                else
                {
                    _clientCodeAccepted = true;
                    _loginRequest = loginRequest.Data;
                }
            }
            else
            {
                _clientCodeMessage = loginRequest.Message;
            }
        }
        else
        {
            _clientCodeMessage = "Wrong client code format";
        }
        StateHasChanged();
    }

    protected void SubmitClientPassword()
    {
        if (_clientPassword.Length == _loginRequest.Indexes.Length)
        {

        }
        else
        {
            _clientPasswordMessage = "Not all fields were filled";
        }
    }

    #endregion
}